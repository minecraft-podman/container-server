import functools
import json
import shlex
import sys
from urllib.request import urlopen


class ServerBuilder:
    """
    Class to define step-wise server builders.

    Steps are defined by the __steps__ list
    """
    def __init__(self, container, root, buildargs):
        self.container = container
        self.root = root
        self.__args__ = buildargs
        vars(self).update(buildargs)

    def __call__(self):
        for cls in reversed(type(self).__mro__):
            if not hasattr(cls, '__steps__'):
                continue
            for step in cls.__steps__:
                func = getattr(self, step)
                if func.__doc__:
                    print(func.__doc__)
                func()

    __steps__ = [
        'step_mkdir', 'step_eula', 'step_write_launch_script', 'step_write_buildargs'
    ]

    def step_mkdir(self):
        (self.root / "mc").mkdir()

    def step_eula(self):
        if not self.eula:
            sys.exit("Must accept EULA at https://account.mojang.com/documents/minecraft_eula")

        (self.root / "mc" / "eula.txt").write_text("""
# Generated by https://github.com/minecraft-podman/container-server
eula=true
""")

    def java_args(self):
        return []

    def jar_name(self):
        return None

    def server_invocation(self):
        return ["/usr/local/openjdk-8/bin/java", *self.java_args(), "-jar", self.jar_name(), "nogui"]

    def step_write_launch_script(self):
        dest = self.root / "mc" / "launch"
        dest.write_text(f"""#!/bin/sh
cd /mc
exec {_make_bourne_command(self.server_invocation())} "$@"
""")
        dest.chmod(0o755)

    def step_write_buildargs(self):
        (self.root / "mc" / ".buildargs").write_text(
            "".join(
                f"{k}={v}\n"
                for k, v in self.__args__.items()
            )
        )


if hasattr(shlex, 'join'):
    # Py3.8
    _make_bourne_command = shlex.join
else:
    def _make_bourne_command(split_command):
        """Return a shell-escaped string from *split_command*."""
        return ' '.join(shlex.quote(arg) for arg in split_command)


@functools.lru_cache()
def get_versions_data():
    with urlopen("https://launchermeta.mojang.com/mc/game/version_manifest.json") as resp:
        return json.load(resp)


@functools.lru_cache()
def get_version_data(num):
    summary = [d for d in get_versions_data()['versions'] if d['id'] == num][0]

    with urlopen(summary['url']) as resp:
        return json.load(resp)


def get_version_from_buildargs(version):
    if version.lower() == 'latest':
        return get_versions_data()['latest']['release']
    elif version.lower() == 'snapshot':
        return get_versions_data()['latest']['snapshot']
    else:
        return version
